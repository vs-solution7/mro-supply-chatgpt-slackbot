service: mro-supply-chatgpt-slackbot

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    BOT_FUNCTION_NAME: ${self:service}-${self:provider.stage}-botFunction
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
          Resource: "arn:aws:lambda:${opt:region, self:provider.region}:*:function:${self:provider.environment.BOT_FUNCTION_NAME}"

functions:
  acknowledgerFunction:
    handler: app/acknowledger.handler
#    provisionedConcurrency: 1
    events:
      - http:
          path: slack/events
          method: post
  botFunction:
    handler: app/bot.handler
    environment:
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    timeout: 300

plugins:
  - serverless-offline

resources:
  Resources:
    conversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: channel_id
            AttributeType: S
        KeySchema:
          - AttributeName: channel_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
